// Generated from regexLexer.g4 by ANTLR 4.13.2
package jext.antlr.v4.regexp;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class regexLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAREN=1, RPAREN=2, PIPE=3, PLUS=4, QUESTION=5, STAR=6, WildcardEsc=7, 
		Char=8, StartQuantity=9, SingleCharEsc=10, MultiCharEsc=11, CatEsc=12, 
		ComplEsc=13, NegCharGroup=14, PosCharGroup=15, EndQuantity=16, QuantExact=17, 
		COMMA=18, EndCategory=19, IsCategory=20, Letters=21, Marks=22, Numbers=23, 
		Punctuation=24, Separators=25, Symbols=26, Others=27, IsBlock=28, NestedSingleCharEsc=29, 
		NestedMultiCharEsc=30, NestedCatEsc=31, NestedComplEsc=32, NestedNegCharGroup=33, 
		NestedPosCharGroup=34, EndCharGroup=35, DASH=36, XmlChar=37;
	public static final int
		QUANTITY=1, CATEGORY=2, CHARGROUP=3;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE", "QUANTITY", "CATEGORY", "CHARGROUP"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"LPAREN", "RPAREN", "PIPE", "PLUS", "QUESTION", "STAR", "WildcardEsc", 
			"Char", "StartQuantity", "SingleCharEsc", "MultiCharEsc", "CatEsc", "ComplEsc", 
			"NegCharGroup", "PosCharGroup", "EndQuantity", "QuantExact", "COMMA", 
			"EndCategory", "IsCategory", "Letters", "Marks", "Numbers", "Punctuation", 
			"Separators", "Symbols", "Others", "IsBlock", "NestedSingleCharEsc", 
			"NestedMultiCharEsc", "NestedCatEsc", "NestedComplEsc", "NestedNegCharGroup", 
			"NestedPosCharGroup", "EndCharGroup", "DASH", "XmlChar", "CAT_ESC", "COMPL_ESC", 
			"MULTI_ESC", "SINGLE_ESC"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'('", "')'", "'|'", "'+'", "'?'", "'*'", "'.'", null, "'{'", null, 
			null, null, null, null, null, null, null, "','", null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			"']'", "'-'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LPAREN", "RPAREN", "PIPE", "PLUS", "QUESTION", "STAR", "WildcardEsc", 
			"Char", "StartQuantity", "SingleCharEsc", "MultiCharEsc", "CatEsc", "ComplEsc", 
			"NegCharGroup", "PosCharGroup", "EndQuantity", "QuantExact", "COMMA", 
			"EndCategory", "IsCategory", "Letters", "Marks", "Numbers", "Punctuation", 
			"Separators", "Symbols", "Others", "IsBlock", "NestedSingleCharEsc", 
			"NestedMultiCharEsc", "NestedCatEsc", "NestedComplEsc", "NestedNegCharGroup", 
			"NestedPosCharGroup", "EndCharGroup", "DASH", "XmlChar"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public regexLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "regexLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000%\u00e6\u0006\uffff\uffff\u0006\uffff\uffff\u0006\uffff\uffff"+
		"\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002"+
		"\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002"+
		"\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002"+
		"\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002"+
		"\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f"+
		"\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012"+
		"\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015"+
		"\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018"+
		"\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b"+
		"\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e"+
		"\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002"+
		"#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007\'\u0002"+
		"(\u0007(\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001"+
		"\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001"+
		"\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b"+
		"\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0004\u0010"+
		"\u0085\b\u0010\u000b\u0010\f\u0010\u0086\u0001\u0011\u0001\u0011\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0096"+
		"\b\u0013\u0001\u0014\u0001\u0014\u0003\u0014\u009a\b\u0014\u0001\u0015"+
		"\u0001\u0015\u0003\u0015\u009e\b\u0015\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u00a2\b\u0016\u0001\u0017\u0001\u0017\u0003\u0017\u00a6\b\u0017\u0001"+
		"\u0018\u0001\u0018\u0003\u0018\u00aa\b\u0018\u0001\u0019\u0001\u0019\u0003"+
		"\u0019\u00ae\b\u0019\u0001\u001a\u0001\u001a\u0003\u001a\u00b2\b\u001a"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0004\u001b\u00b8\b\u001b"+
		"\u000b\u001b\f\u001b\u00b9\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0001!\u0001"+
		"!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001\"\u0001#\u0001#\u0001$\u0001"+
		"$\u0001%\u0001%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001\'\u0001"+
		"\'\u0001\'\u0001(\u0001(\u0001(\u0000\u0000)\u0004\u0001\u0006\u0002\b"+
		"\u0003\n\u0004\f\u0005\u000e\u0006\u0010\u0007\u0012\b\u0014\t\u0016\n"+
		"\u0018\u000b\u001a\f\u001c\r\u001e\u000e \u000f\"\u0010$\u0011&\u0012"+
		"(\u0013*\u0014,\u0015.\u00160\u00172\u00184\u00196\u001a8\u001b:\u001c"+
		"<\u001d>\u001e@\u001fB D!F\"H#J$L%N\u0000P\u0000R\u0000T\u0000\u0004\u0000"+
		"\u0001\u0002\u0003\r\u0005\u0000(+..??[]||\u0001\u000009\u0003\u0000l"+
		"mootu\u0003\u0000cceenn\u0003\u0000ddlloo\u0004\u0000cfiiooss\u0003\u0000"+
		"llppss\u0004\u0000cckkmmoo\u0003\u0000ccffno\u0004\u0000--09AZaz\u0003"+
		"\u0000--[[]]\b\u0000CDIISSWWcdiissww\b\u0000(+-.??[^nnrrtt{}\u00ed\u0000"+
		"\u0004\u0001\u0000\u0000\u0000\u0000\u0006\u0001\u0000\u0000\u0000\u0000"+
		"\b\u0001\u0000\u0000\u0000\u0000\n\u0001\u0000\u0000\u0000\u0000\f\u0001"+
		"\u0000\u0000\u0000\u0000\u000e\u0001\u0000\u0000\u0000\u0000\u0010\u0001"+
		"\u0000\u0000\u0000\u0000\u0012\u0001\u0000\u0000\u0000\u0000\u0014\u0001"+
		"\u0000\u0000\u0000\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0018\u0001"+
		"\u0000\u0000\u0000\u0000\u001a\u0001\u0000\u0000\u0000\u0000\u001c\u0001"+
		"\u0000\u0000\u0000\u0000\u001e\u0001\u0000\u0000\u0000\u0000 \u0001\u0000"+
		"\u0000\u0000\u0001\"\u0001\u0000\u0000\u0000\u0001$\u0001\u0000\u0000"+
		"\u0000\u0001&\u0001\u0000\u0000\u0000\u0002(\u0001\u0000\u0000\u0000\u0002"+
		"*\u0001\u0000\u0000\u0000\u0002,\u0001\u0000\u0000\u0000\u0002.\u0001"+
		"\u0000\u0000\u0000\u00020\u0001\u0000\u0000\u0000\u00022\u0001\u0000\u0000"+
		"\u0000\u00024\u0001\u0000\u0000\u0000\u00026\u0001\u0000\u0000\u0000\u0002"+
		"8\u0001\u0000\u0000\u0000\u0002:\u0001\u0000\u0000\u0000\u0003<\u0001"+
		"\u0000\u0000\u0000\u0003>\u0001\u0000\u0000\u0000\u0003@\u0001\u0000\u0000"+
		"\u0000\u0003B\u0001\u0000\u0000\u0000\u0003D\u0001\u0000\u0000\u0000\u0003"+
		"F\u0001\u0000\u0000\u0000\u0003H\u0001\u0000\u0000\u0000\u0003J\u0001"+
		"\u0000\u0000\u0000\u0003L\u0001\u0000\u0000\u0000\u0004V\u0001\u0000\u0000"+
		"\u0000\u0006X\u0001\u0000\u0000\u0000\bZ\u0001\u0000\u0000\u0000\n\\\u0001"+
		"\u0000\u0000\u0000\f^\u0001\u0000\u0000\u0000\u000e`\u0001\u0000\u0000"+
		"\u0000\u0010b\u0001\u0000\u0000\u0000\u0012d\u0001\u0000\u0000\u0000\u0014"+
		"f\u0001\u0000\u0000\u0000\u0016j\u0001\u0000\u0000\u0000\u0018l\u0001"+
		"\u0000\u0000\u0000\u001an\u0001\u0000\u0000\u0000\u001cr\u0001\u0000\u0000"+
		"\u0000\u001ev\u0001\u0000\u0000\u0000 {\u0001\u0000\u0000\u0000\"\u007f"+
		"\u0001\u0000\u0000\u0000$\u0084\u0001\u0000\u0000\u0000&\u0088\u0001\u0000"+
		"\u0000\u0000(\u008a\u0001\u0000\u0000\u0000*\u0095\u0001\u0000\u0000\u0000"+
		",\u0097\u0001\u0000\u0000\u0000.\u009b\u0001\u0000\u0000\u00000\u009f"+
		"\u0001\u0000\u0000\u00002\u00a3\u0001\u0000\u0000\u00004\u00a7\u0001\u0000"+
		"\u0000\u00006\u00ab\u0001\u0000\u0000\u00008\u00af\u0001\u0000\u0000\u0000"+
		":\u00b3\u0001\u0000\u0000\u0000<\u00bb\u0001\u0000\u0000\u0000>\u00bd"+
		"\u0001\u0000\u0000\u0000@\u00bf\u0001\u0000\u0000\u0000B\u00c3\u0001\u0000"+
		"\u0000\u0000D\u00c7\u0001\u0000\u0000\u0000F\u00cc\u0001\u0000\u0000\u0000"+
		"H\u00d0\u0001\u0000\u0000\u0000J\u00d4\u0001\u0000\u0000\u0000L\u00d6"+
		"\u0001\u0000\u0000\u0000N\u00d8\u0001\u0000\u0000\u0000P\u00dc\u0001\u0000"+
		"\u0000\u0000R\u00e0\u0001\u0000\u0000\u0000T\u00e3\u0001\u0000\u0000\u0000"+
		"VW\u0005(\u0000\u0000W\u0005\u0001\u0000\u0000\u0000XY\u0005)\u0000\u0000"+
		"Y\u0007\u0001\u0000\u0000\u0000Z[\u0005|\u0000\u0000[\t\u0001\u0000\u0000"+
		"\u0000\\]\u0005+\u0000\u0000]\u000b\u0001\u0000\u0000\u0000^_\u0005?\u0000"+
		"\u0000_\r\u0001\u0000\u0000\u0000`a\u0005*\u0000\u0000a\u000f\u0001\u0000"+
		"\u0000\u0000bc\u0005.\u0000\u0000c\u0011\u0001\u0000\u0000\u0000de\b\u0000"+
		"\u0000\u0000e\u0013\u0001\u0000\u0000\u0000fg\u0005{\u0000\u0000gh\u0001"+
		"\u0000\u0000\u0000hi\u0006\b\u0000\u0000i\u0015\u0001\u0000\u0000\u0000"+
		"jk\u0003T(\u0000k\u0017\u0001\u0000\u0000\u0000lm\u0003R\'\u0000m\u0019"+
		"\u0001\u0000\u0000\u0000no\u0003N%\u0000op\u0001\u0000\u0000\u0000pq\u0006"+
		"\u000b\u0001\u0000q\u001b\u0001\u0000\u0000\u0000rs\u0003P&\u0000st\u0001"+
		"\u0000\u0000\u0000tu\u0006\f\u0001\u0000u\u001d\u0001\u0000\u0000\u0000"+
		"vw\u0005[\u0000\u0000wx\u0005^\u0000\u0000xy\u0001\u0000\u0000\u0000y"+
		"z\u0006\r\u0002\u0000z\u001f\u0001\u0000\u0000\u0000{|\u0005[\u0000\u0000"+
		"|}\u0001\u0000\u0000\u0000}~\u0006\u000e\u0002\u0000~!\u0001\u0000\u0000"+
		"\u0000\u007f\u0080\u0005}\u0000\u0000\u0080\u0081\u0001\u0000\u0000\u0000"+
		"\u0081\u0082\u0006\u000f\u0003\u0000\u0082#\u0001\u0000\u0000\u0000\u0083"+
		"\u0085\u0007\u0001\u0000\u0000\u0084\u0083\u0001\u0000\u0000\u0000\u0085"+
		"\u0086\u0001\u0000\u0000\u0000\u0086\u0084\u0001\u0000\u0000\u0000\u0086"+
		"\u0087\u0001\u0000\u0000\u0000\u0087%\u0001\u0000\u0000\u0000\u0088\u0089"+
		"\u0005,\u0000\u0000\u0089\'\u0001\u0000\u0000\u0000\u008a\u008b\u0005"+
		"}\u0000\u0000\u008b\u008c\u0001\u0000\u0000\u0000\u008c\u008d\u0006\u0012"+
		"\u0003\u0000\u008d)\u0001\u0000\u0000\u0000\u008e\u0096\u0003,\u0014\u0000"+
		"\u008f\u0096\u0003.\u0015\u0000\u0090\u0096\u00030\u0016\u0000\u0091\u0096"+
		"\u00032\u0017\u0000\u0092\u0096\u00034\u0018\u0000\u0093\u0096\u00036"+
		"\u0019\u0000\u0094\u0096\u00038\u001a\u0000\u0095\u008e\u0001\u0000\u0000"+
		"\u0000\u0095\u008f\u0001\u0000\u0000\u0000\u0095\u0090\u0001\u0000\u0000"+
		"\u0000\u0095\u0091\u0001\u0000\u0000\u0000\u0095\u0092\u0001\u0000\u0000"+
		"\u0000\u0095\u0093\u0001\u0000\u0000\u0000\u0095\u0094\u0001\u0000\u0000"+
		"\u0000\u0096+\u0001\u0000\u0000\u0000\u0097\u0099\u0005L\u0000\u0000\u0098"+
		"\u009a\u0007\u0002\u0000\u0000\u0099\u0098\u0001\u0000\u0000\u0000\u0099"+
		"\u009a\u0001\u0000\u0000\u0000\u009a-\u0001\u0000\u0000\u0000\u009b\u009d"+
		"\u0005M\u0000\u0000\u009c\u009e\u0007\u0003\u0000\u0000\u009d\u009c\u0001"+
		"\u0000\u0000\u0000\u009d\u009e\u0001\u0000\u0000\u0000\u009e/\u0001\u0000"+
		"\u0000\u0000\u009f\u00a1\u0005N\u0000\u0000\u00a0\u00a2\u0007\u0004\u0000"+
		"\u0000\u00a1\u00a0\u0001\u0000\u0000\u0000\u00a1\u00a2\u0001\u0000\u0000"+
		"\u0000\u00a21\u0001\u0000\u0000\u0000\u00a3\u00a5\u0005P\u0000\u0000\u00a4"+
		"\u00a6\u0007\u0005\u0000\u0000\u00a5\u00a4\u0001\u0000\u0000\u0000\u00a5"+
		"\u00a6\u0001\u0000\u0000\u0000\u00a63\u0001\u0000\u0000\u0000\u00a7\u00a9"+
		"\u0005Z\u0000\u0000\u00a8\u00aa\u0007\u0006\u0000\u0000\u00a9\u00a8\u0001"+
		"\u0000\u0000\u0000\u00a9\u00aa\u0001\u0000\u0000\u0000\u00aa5\u0001\u0000"+
		"\u0000\u0000\u00ab\u00ad\u0005S\u0000\u0000\u00ac\u00ae\u0007\u0007\u0000"+
		"\u0000\u00ad\u00ac\u0001\u0000\u0000\u0000\u00ad\u00ae\u0001\u0000\u0000"+
		"\u0000\u00ae7\u0001\u0000\u0000\u0000\u00af\u00b1\u0005C\u0000\u0000\u00b0"+
		"\u00b2\u0007\b\u0000\u0000\u00b1\u00b0\u0001\u0000\u0000\u0000\u00b1\u00b2"+
		"\u0001\u0000\u0000\u0000\u00b29\u0001\u0000\u0000\u0000\u00b3\u00b4\u0005"+
		"I\u0000\u0000\u00b4\u00b5\u0005s\u0000\u0000\u00b5\u00b7\u0001\u0000\u0000"+
		"\u0000\u00b6\u00b8\u0007\t\u0000\u0000\u00b7\u00b6\u0001\u0000\u0000\u0000"+
		"\u00b8\u00b9\u0001\u0000\u0000\u0000\u00b9\u00b7\u0001\u0000\u0000\u0000"+
		"\u00b9\u00ba\u0001\u0000\u0000\u0000\u00ba;\u0001\u0000\u0000\u0000\u00bb"+
		"\u00bc\u0003T(\u0000\u00bc=\u0001\u0000\u0000\u0000\u00bd\u00be\u0003"+
		"R\'\u0000\u00be?\u0001\u0000\u0000\u0000\u00bf\u00c0\u0003N%\u0000\u00c0"+
		"\u00c1\u0001\u0000\u0000\u0000\u00c1\u00c2\u0006\u001e\u0001\u0000\u00c2"+
		"A\u0001\u0000\u0000\u0000\u00c3\u00c4\u0003P&\u0000\u00c4\u00c5\u0001"+
		"\u0000\u0000\u0000\u00c5\u00c6\u0006\u001f\u0001\u0000\u00c6C\u0001\u0000"+
		"\u0000\u0000\u00c7\u00c8\u0005[\u0000\u0000\u00c8\u00c9\u0005^\u0000\u0000"+
		"\u00c9\u00ca\u0001\u0000\u0000\u0000\u00ca\u00cb\u0006 \u0002\u0000\u00cb"+
		"E\u0001\u0000\u0000\u0000\u00cc\u00cd\u0005[\u0000\u0000\u00cd\u00ce\u0001"+
		"\u0000\u0000\u0000\u00ce\u00cf\u0006!\u0002\u0000\u00cfG\u0001\u0000\u0000"+
		"\u0000\u00d0\u00d1\u0005]\u0000\u0000\u00d1\u00d2\u0001\u0000\u0000\u0000"+
		"\u00d2\u00d3\u0006\"\u0003\u0000\u00d3I\u0001\u0000\u0000\u0000\u00d4"+
		"\u00d5\u0005-\u0000\u0000\u00d5K\u0001\u0000\u0000\u0000\u00d6\u00d7\b"+
		"\n\u0000\u0000\u00d7M\u0001\u0000\u0000\u0000\u00d8\u00d9\u0005\\\u0000"+
		"\u0000\u00d9\u00da\u0005p\u0000\u0000\u00da\u00db\u0005{\u0000\u0000\u00db"+
		"O\u0001\u0000\u0000\u0000\u00dc\u00dd\u0005\\\u0000\u0000\u00dd\u00de"+
		"\u0005P\u0000\u0000\u00de\u00df\u0005{\u0000\u0000\u00dfQ\u0001\u0000"+
		"\u0000\u0000\u00e0\u00e1\u0005\\\u0000\u0000\u00e1\u00e2\u0007\u000b\u0000"+
		"\u0000\u00e2S\u0001\u0000\u0000\u0000\u00e3\u00e4\u0005\\\u0000\u0000"+
		"\u00e4\u00e5\u0007\f\u0000\u0000\u00e5U\u0001\u0000\u0000\u0000\u000f"+
		"\u0000\u0001\u0002\u0003\u0086\u0095\u0099\u009d\u00a1\u00a5\u00a9\u00ad"+
		"\u00b1\u00b7\u00b9\u0004\u0005\u0001\u0000\u0005\u0002\u0000\u0005\u0003"+
		"\u0000\u0004\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
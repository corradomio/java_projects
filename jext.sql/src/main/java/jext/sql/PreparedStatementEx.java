package jext.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

public class PreparedStatementEx extends StatementEx implements PreparedStatement {

    // ----------------------------------------------------------------------
    // Constructor
    // ----------------------------------------------------------------------

    public PreparedStatementEx(ConnectionEx c, String sqlx) {
        super(c, sqlx);
    }

    public PreparedStatementEx(ConnectionEx c, String sqlx, int resultSetType, int resultSetConcurrency) {
        super(c, sqlx, resultSetType, resultSetConcurrency);
    }

    public PreparedStatementEx(ConnectionEx c, String sqlx, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        super(c, sqlx, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public PreparedStatementEx(ConnectionEx c, String sqlx, int autoGeneratedKeys) {
        super(c, sqlx, autoGeneratedKeys);
    }

    public PreparedStatementEx(ConnectionEx c, String sqlx, int[] columnIndexes) {
        super(c, sqlx, columnIndexes);
    }

    public PreparedStatementEx(ConnectionEx c, String sqlx, String[] columnNames) {
        super(c, sqlx, columnNames);
    }

    // ----------------------------------------------------------------------
    // Properties
    // ----------------------------------------------------------------------

    private java.sql.PreparedStatement ps() throws java.sql.SQLException {
        if (this.stmt == null) {
            // replace '$s' and '$<index>$s' parameters
            if (this.sparams[0] != null)
                this.sql = String.format(this.sql, this.sparams);

            switch (this.mode) {
                case NONE:
                    this.stmt = this.conn().prepareStatement(this.sql);
                    break;
                case RESULT_TYPE_CONCURRENCY:
                    this.stmt = this.conn().prepareStatement(this.sql, this.resultSetType, this.resultSetConcurrency);
                    break;
                case RESULT_TYPE_CONCURRENCY_HOLDABILITY:
                    this.stmt = this.conn().prepareStatement(this.sql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability);
                    break;
                case AUTO_GENERATED_KEYS:
                    this.stmt = this.conn().prepareStatement(this.sql, this.autoGeneratedKeys);
                    break;
                case COLUMN_INDEXES:
                    this.stmt = this.conn().prepareStatement(this.sql, this.columnIndexes);
                    break;
                case COLUMN_NAMES:
                    this.stmt = this.conn().prepareStatement(this.sql, this.columnNames);
                    break;
                default:
                    this.stmt = this.conn().prepareStatement(this.sql);
            }
        }
        return (java.sql.PreparedStatement) this.stmt;
    }

    // ----------------------------------------------------------------------
    // Execute
    // ----------------------------------------------------------------------

    @Override
    public ResultSet executeQuery() throws java.sql.SQLException {
        try {
            return new ResultSetEx(this, this.ps().executeQuery());
        }
        catch (java.sql.SQLException e) {
            throw SQLException.of(e, this.sql, this.params);
        }
    }

    @Override
    public int executeUpdate() throws java.sql.SQLException {
        try {
            return this.ps().executeUpdate();
        } catch (java.sql.SQLException e) {
            throw SQLException.of(e, this.sql, this.params);
        }
    }

    @Override
    public boolean execute() throws java.sql.SQLException {
        try {
            return this.ps().execute();
        } catch (java.sql.SQLException e) {
            throw SQLException.of(e, this.sql, this.params);
        }
    }

    // ----------------------------------------------------------------------
    // Special case
    // ----------------------------------------------------------------------
    // if parameterIndex is < 0, the parameter is used in the statement
    // formatting

    @Override
    public void setString(int parameterIndex, String x) throws java.sql.SQLException {
        if (parameterIndex < 0) {
            this.sparams[-parameterIndex-1] = x;
        }
        else {
            this.params.put(parameterIndex, x);
            this.ps().setString(parameterIndex, x);
        }
    }

    // ----------------------------------------------------------------------
    // Setter/Getter
    // ----------------------------------------------------------------------

    @Override
    public void setNull(int parameterIndex, int sqlType) throws java.sql.SQLException {
        this.params.put(parameterIndex, String.format("null[%d]", sqlType));
        this.ps().setNull(parameterIndex, sqlType);
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBoolean(parameterIndex, x);
    }

    @Override
    public void setByte(int parameterIndex, byte x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setByte(parameterIndex, x);
    }

    @Override
    public void setShort(int parameterIndex, short x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setShort(parameterIndex, x);
    }

    @Override
    public void setInt(int parameterIndex, int x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setInt(parameterIndex, x);
    }

    @Override
    public void setLong(int parameterIndex, long x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setLong(parameterIndex, x);
    }

    @Override
    public void setFloat(int parameterIndex, float x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setFloat(parameterIndex, x);
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setDouble(parameterIndex, x);
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBigDecimal(parameterIndex, x);
    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBytes(parameterIndex, x);
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setDate(parameterIndex, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setTime(parameterIndex, x);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setTimestamp(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setAsciiStream(parameterIndex, x, length);
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setUnicodeStream(parameterIndex, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBinaryStream(parameterIndex, x, length);
    }

    @Override
    public void clearParameters() throws java.sql.SQLException {
        this.params.clear();
        this.ps().clearParameters();
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setObject(parameterIndex, x, targetSqlType);
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setObject(parameterIndex, x);
    }

    @Override
    public void addBatch() throws java.sql.SQLException {
        this.ps().addBatch();
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setCharacterStream(parameterIndex, reader, length);
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setRef(parameterIndex, x);
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBlob(parameterIndex, x);
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setClob(parameterIndex, x);
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setArray(parameterIndex, x);
    }

    @Override
    public ResultSetMetaData getMetaData() throws java.sql.SQLException {
        return this.ps().getMetaData();
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setDate(parameterIndex, x, cal);
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setTime(parameterIndex, x, cal);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setTimestamp(parameterIndex, x, cal);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) throws java.sql.SQLException {
        this.params.put(parameterIndex, String.format("null[%d]", sqlType));
        this.ps().setNull(parameterIndex, sqlType, typeName);
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setURL(parameterIndex, x);
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws java.sql.SQLException {
        return this.ps().getParameterMetaData();
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setRowId(parameterIndex, x);
    }

    @Override
    public void setNString(int parameterIndex, String value) throws java.sql.SQLException {
        this.params.put(parameterIndex, value);
        this.ps().setNString(parameterIndex, value);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, value);
        this.ps().setNCharacterStream(parameterIndex, value, length);
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws java.sql.SQLException {
        this.params.put(parameterIndex, value);
        this.ps().setNClob(parameterIndex, value);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setClob(parameterIndex, reader, length);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, inputStream);
        this.ps().setBlob(parameterIndex, inputStream, length);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setNClob(parameterIndex, reader, length);
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws java.sql.SQLException {
        this.params.put(parameterIndex, xmlObject);
        this.ps().setSQLXML(parameterIndex, xmlObject);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setObject(parameterIndex, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setAsciiStream(parameterIndex, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBinaryStream(parameterIndex, x, length);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setCharacterStream(parameterIndex, reader, length);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setAsciiStream(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) throws java.sql.SQLException {
        this.params.put(parameterIndex, x);
        this.ps().setBinaryStream(parameterIndex, x);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setCharacterStream(parameterIndex, reader);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws java.sql.SQLException {
        this.params.put(parameterIndex, value);
        this.ps().setNCharacterStream(parameterIndex, value);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setClob(parameterIndex, reader);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) throws java.sql.SQLException {
        this.params.put(parameterIndex, inputStream);
        this.ps().setBlob(parameterIndex, inputStream);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws java.sql.SQLException {
        this.params.put(parameterIndex, reader);
        this.ps().setNClob(parameterIndex, reader);
    }

    // ----------------------------------------------------------------------
    // set by name
    // ----------------------------------------------------------------------

    private int[] getIndices(String parameterName) throws java.sql.SQLException {
        if (!names.containsKey(parameterName))
            throw SQLException.of("Invalid parameter name " + parameterName, this.sql, this.params);

        return names.get(parameterName);
    }

    @Override
    public void setNull(String parameterName, int sqlType) throws java.sql.SQLException {
        this.params.put(parameterName, String.format("null[%d]", sqlType));
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNull(parameterIndex, sqlType);
        }
    }

    @Override
    public void setBoolean(String parameterName, boolean x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBoolean(parameterIndex, x);
        }
    }

    @Override
    public void setByte(String parameterName, byte x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setByte(parameterIndex, x);
        }
    }

    @Override
    public void setShort(String parameterName, short x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setShort(parameterIndex, x);
        }
    }

    @Override
    public void setInt(String parameterName, int x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setInt(parameterIndex, x);
        }
    }

    @Override
    public void setLong(String parameterName, long x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setLong(parameterIndex, x);
        }
    }

    @Override
    public void setFloat(String parameterName, float x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setFloat(parameterIndex, x);
        }
    }

    @Override
    public void setDouble(String parameterName, double x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setDouble(parameterIndex, x);
        }
    }

    @Override
    public void setBigDecimal(String parameterName, BigDecimal x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBigDecimal(parameterIndex, x);
        }
    }

    @Override
    public void setString(String parameterName, String x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setString(parameterIndex, x);
        }
    }

    @Override
    public void setBytes(String parameterName, byte[] x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBytes(parameterIndex, x);
        }
    }

    @Override
    public void setDate(String parameterName, Date x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setDate(parameterIndex, x);
        }
    }

    @Override
    public void setTime(String parameterName, Time x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setTime(parameterIndex, x);
        }
    }

    @Override
    public void setTimestamp(String parameterName, Timestamp x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setTimestamp(parameterIndex, x);
        }
    }

    @Override
    public void setAsciiStream(String parameterName, InputStream x, int length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setAsciiStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setBinaryStream(String parameterName, InputStream x, int length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBinaryStream(parameterIndex, x, length);
        }
    }

    //----------------------------------------------------------------------
    // Advanced features:

    @Override
    public void setObject(String parameterName, Object x, int targetSqlType) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setObject(parameterIndex, x, targetSqlType);
        }
    }

    @Override
    public void setObject(String parameterName, Object x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setObject(parameterIndex, x);
        }
    }

    @Override
    public void setCharacterStream(String parameterName, Reader x, int length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setCharacterStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setBlob(String parameterName, Blob x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBlob(parameterIndex, x);
        }
    }

    @Override
    public void setClob(String parameterName, Clob x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setClob(parameterIndex, x);
        }
    }

    @Override
    public void setDate(String parameterName, Date x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setDate(parameterIndex, x, cal);
        }
    }

    @Override
    public void setTime(String parameterName, Time x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setTime(parameterIndex, x, cal);
        }
    }

    @Override
    public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setTimestamp(parameterIndex, x, cal);
        }
    }

    @Override
    public void setNull(String parameterName, int sqlType, String typeName) throws java.sql.SQLException {
        this.params.put(parameterName, String.format("null[%d,%s]", sqlType, typeName));
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNull(parameterIndex, sqlType, typeName);
        }
    }

    @Override
    public void setURL(String parameterName, URL x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setURL(parameterIndex, x);
        }
    }

    //------------------------- JDBC 4.0 -----------------------------------

    @Override
    public void setRowId(String parameterName, RowId x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setRowId(parameterIndex, x);
        }
    }

    @Override
    public void setNString(String parameterName, String x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNString(parameterIndex, x);
        }
    }

    @Override
    public void setNCharacterStream(String parameterName, Reader x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNCharacterStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setNClob(String parameterName, NClob x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNClob(parameterIndex, x);
        }
    }

    @Override
    public void setClob(String parameterName, Reader x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setClob(parameterIndex, x, length);
        }
    }

    @Override
    public void setBlob(String parameterName, InputStream x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBlob(parameterIndex, x, length);
        }
    }

    @Override
    public void setNClob(String parameterName, Reader x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNClob(parameterIndex, x, length);
        }
    }

    @Override
    public void setSQLXML(String parameterName, SQLXML x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setSQLXML(parameterIndex, x);
        }
    }

    @Override
    public void setObject(String parameterName, Object x, int targetSqlType, int scaleOrLength) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setObject(parameterIndex, x, targetSqlType, scaleOrLength);
        }
    }

    @Override
    public void setAsciiStream(String parameterName, InputStream x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setAsciiStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setBinaryStream(String parameterName, InputStream x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBinaryStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setCharacterStream(String parameterName, Reader x, long length) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setCharacterStream(parameterIndex, x, length);
        }
    }

    @Override
    public void setAsciiStream(String parameterName, InputStream x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setAsciiStream(parameterIndex, x);
        }
    }

    @Override
    public void setBinaryStream(String parameterName, InputStream x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBinaryStream(parameterIndex, x);
        }
    }

    @Override
    public void setCharacterStream(String parameterName, Reader x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setCharacterStream(parameterIndex, x);
        }
    }

    @Override
    public void setNCharacterStream(String parameterName, Reader x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNCharacterStream(parameterIndex, x);
        }
    }

    @Override
    public void setClob(String parameterName, Reader x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setClob(parameterIndex, x);
        }
    }

    @Override
    public void setBlob(String parameterName, InputStream x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setBlob(parameterIndex, x);
        }
    }

    @Override
    public void setNClob(String parameterName, Reader x) throws java.sql.SQLException {
        this.params.put(parameterName, x);
        int[] indices = getIndices(parameterName);
        for(int parameterIndex : indices) {
            this.ps().setNClob(parameterIndex, x);
        }
    }

    // ----------------------------------------------------------------------
    // End
    // ----------------------------------------------------------------------

}

package jext.sql;

import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Struct;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class ConnectionEx implements Connection {

    static ConnectionEx of(java.sql.Connection c, Properties info) {
        return new ConnectionEx(c, info);
    }

    // ----------------------------------------------------------------------
    // Fields
    // ----------------------------------------------------------------------

    Properties info;
    java.sql.Connection c;

    // ----------------------------------------------------------------------
    // Constructor
    // ----------------------------------------------------------------------

    private ConnectionEx(java.sql.Connection c, Properties info) {
        this.info = info;
        this.c = c;
         registerNamedQueries();
    }

    // ----------------------------------------------------------------------
    // Named Queries
    // ----------------------------------------------------------------------

    private void registerNamedQueries() {

    }

    // ----------------------------------------------------------------------
    // createStatement
    // ----------------------------------------------------------------------

    @Override
    public Statement createStatement() throws SQLException {
        java.sql.Statement s = c.createStatement();
        return StatementEx.of(this, s, "");
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        java.sql.Statement s = c.createStatement(resultSetType, resultSetConcurrency);
        return StatementEx.of(this, s, "");
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        java.sql.Statement s = c.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        return StatementEx.of(this, s, "");
    }

    // ----------------------------------------------------------------------
    // prepareCall
    // ----------------------------------------------------------------------

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        java.sql.CallableStatement cs = c.prepareCall(sql);
        return CallableStatementEx.of(this, cs, sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        java.sql.CallableStatement cs = c.prepareCall(sql, resultSetType, resultSetConcurrency);
        return CallableStatementEx.of(this, cs, sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        java.sql.CallableStatement cs = c.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return CallableStatementEx.of(this, cs, sql);
    }

    // ----------------------------------------------------------------------
    // prepareStatement
    // ----------------------------------------------------------------------

    @Override
    public PreparedStatement prepareStatement(String sqlx) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    @Override
    public PreparedStatement prepareStatement(String sqlx, int resultSetType, int resultSetConcurrency) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql, resultSetType, resultSetConcurrency);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    @Override
    public PreparedStatement prepareStatement(String sqlx, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    @Override
    public PreparedStatement prepareStatement(String sqlx, int autoGeneratedKeys) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql, autoGeneratedKeys);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    @Override
    public PreparedStatement prepareStatement(String sqlx, int[] columnIndexes) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql, columnIndexes);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    @Override
    public PreparedStatement prepareStatement(String sqlx, String[] columnNames) throws SQLException {
        Map<String, int[]> names = new LinkedHashMap<>();
        String sql = parseSqlx(sqlx, names);

        java.sql.PreparedStatement ps = c.prepareStatement(sql, columnNames);
        return PreparedStatementEx.of(this, ps, sqlx, names);
    }

    // ----------------------------------------------------------------------

    private static final int[] NO_INDICES = new int[0];

    private static String parseSqlx(String sqlx, Map<String, int[]> names) {
        // scan the statement for '?name'
        //
        int index = 0;
        int pos = 0, len = sqlx.length(), at;
        StringBuilder sql = new StringBuilder();
        StringBuilder builder;
        while (true) {
            // scan for '?...'
            at = sqlx.indexOf('?', pos);
            if (at == -1) break;
            index++;

            // append '...?'
            sql.append(sqlx, pos, at+1);

            // scan for ?name
            pos = at+1;
            builder = new StringBuilder();
            while(pos < len && Character.isLetterOrDigit(sqlx.charAt(pos))){
                builder.append(sqlx.charAt(pos));
                pos++;
            }

            // if it was '?name', register name & index
            if (builder.length() > 0) {
                String name = builder.toString();
                addName(names, name, index);
            }
        }
        // append the remaining part of the statement
        sql.append(sqlx, pos, len);
        return sql.toString();
    }

    private static void addName(Map<String, int[]> names, String name, int index){
        if (!names.containsKey(name))
            names.put(name, new int[0]);
        int[] old_indices = names.getOrDefault(name, NO_INDICES);
        int[] new_indices = new int[old_indices.length + 1];
        for(int i=0; i<old_indices.length; i++){
            new_indices[i] = old_indices[i];
        }
        new_indices[old_indices.length] = index;
        names.put(name, new_indices);
    }

    // ----------------------------------------------------------------------
    // Connection
    // ----------------------------------------------------------------------

    @Override
    public void commit() throws SQLException {
        c.commit();
    }

    @Override
    public void rollback() throws SQLException {
        c.rollback();
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        c.rollback(savepoint);
    }

    @Override
    public void close() throws SQLException {
        c.close();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return c.isClosed();
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        c.abort(executor);
    }

    // ----------------------------------------------------------------------
    // Getter/Setter
    // ----------------------------------------------------------------------

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        c.setAutoCommit(autoCommit);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return c.getAutoCommit();
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return c.nativeSQL(sql);
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return c.getMetaData();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        c.setReadOnly(readOnly);
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return c.isReadOnly();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        c.setCatalog(catalog);
    }

    @Override
    public String getCatalog() throws SQLException {
        return c.getCatalog();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        c.setTransactionIsolation(level);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return c.getTransactionIsolation();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return c.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        c.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return c.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        c.setTypeMap(map);
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        c.setHoldability(holdability);
    }

    @Override
    public int getHoldability() throws SQLException {
        return c.getHoldability();
    }

    @Override
    public Clob createClob() throws SQLException {
        return c.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return c.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return c.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return c.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return c.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        c.setClientInfo(name, value);
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        c.setClientInfo(properties);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return c.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return c.getClientInfo();
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return c.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return c.createStruct(typeName, attributes);
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        c.setSchema(schema);
    }

    @Override
    public String getSchema() throws SQLException {
        return c.getSchema();
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        c.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        return c.getNetworkTimeout();
    }

    // ----------------------------------------------------------------------
    // Savepoint
    // ----------------------------------------------------------------------

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return c.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return c.setSavepoint(name);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        c.releaseSavepoint(savepoint);
    }

    // ----------------------------------------------------------------------
    // Wrap
    // ----------------------------------------------------------------------

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return c.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return c.isWrapperFor(iface);
    }

}

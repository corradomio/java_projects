package jext.sql;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.Map;

public class StatementEx implements Statement {

    static StatementEx of(ConnectionEx c, java.sql.Statement s, String sql) {
        return new StatementEx(c, s, sql);
    }

    // ----------------------------------------------------------------------
    // Fields
    // ----------------------------------------------------------------------

    protected String sql;
    protected ConnectionEx c;
    protected java.sql.Statement s;
    protected Map<String, int[]> names = new HashMap<>();
    protected Map<Object, Object> params = new HashMap<>();

    // ----------------------------------------------------------------------
    // Constructor
    // ----------------------------------------------------------------------

    protected StatementEx(ConnectionEx c, java.sql.Statement s, String sql) {
        this.c = c;
        this.s = s;
        this.sql = sql;
    }

    // ----------------------------------------------------------------------
    // Package properties
    // ----------------------------------------------------------------------

    @Override
    public Connection getConnection() throws SQLException {
        return c;
    }

    // ----------------------------------------------------------------------
    // Execute
    // ----------------------------------------------------------------------

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        try {
            this.sql = sql;
            return ResultSetEx.of(this, s.executeQuery(sql));
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        try {
            this.sql = sql;
            return s.executeUpdate(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        try {
            this.sql = sql;
            return s.execute(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sql = sql;
            return s.executeUpdate(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sql = sql;
            return s.executeUpdate(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            this.sql = sql;
            return s.executeUpdate(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sql = sql;
            return s.execute(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sql = sql;
            return s.execute(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            this.sql = sql;
            return s.execute(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sql = sql;
            return s.executeLargeUpdate(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sql = sql;
            return s.executeLargeUpdate(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            this.sql = sql;
            return s.executeLargeUpdate(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        try {
            this.sql = sql;
            return s.executeLargeUpdate(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    // ----------------------------------------------------------------------
    // ResultSet
    // ----------------------------------------------------------------------

    @Override
    public ResultSet getResultSet() throws SQLException {
        return ResultSetEx.of(this, s.getResultSet());
    }

    // ----------------------------------------------------------------------
    // Close
    // ----------------------------------------------------------------------

    @Override
    public void close() throws SQLException {
        s.close();
    }

    @Override
    public void cancel() throws SQLException {
        s.cancel();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return s.isClosed();
    }

    // ----------------------------------------------------------------------
    // Getter/Setter
    // ----------------------------------------------------------------------

    @Override
    public int getMaxFieldSize() throws SQLException {
        return s.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        s.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return s.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        s.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        s.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return s.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        s.setQueryTimeout(seconds);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return s.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        s.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        s.setCursorName(name);
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return s.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return s.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        s.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return s.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        s.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return s.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return s.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return s.getResultSetType();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return ResultSetEx.of(this, s.getGeneratedKeys());
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return s.getResultSetHoldability();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        s.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return s.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        s.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return s.isCloseOnCompletion();
    }

    // ----------------------------------------------------------------------
    // Batch
    // ----------------------------------------------------------------------

    @Override
    public void addBatch(String sql) throws SQLException {
        s.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        s.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return s.executeBatch();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return s.getMoreResults(current);
    }

    // ----------------------------------------------------------------------
    // Large
    // ----------------------------------------------------------------------

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return s.getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        s.setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return s.getLargeMaxRows();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return s.executeLargeBatch();
    }

    // ----------------------------------------------------------------------
    // Wrap
    // ----------------------------------------------------------------------

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return s.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return s.isWrapperFor(iface);
    }
}

package jext.sql;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.Map;

public class StatementEx implements Statement {

    // static StatementEx of(ConnectionEx c, java.sql.Statement s, String sql) {
    //     return new StatementEx(c, s, sql);
    // }

    protected enum Mode {
        NONE,
        RESULT_TYPE_CONCURRENCY,
        RESULT_TYPE_CONCURRENCY_HOLDABILITY,
        AUTO_GENERATED_KEYS,
        COLUMN_INDEXES,
        COLUMN_NAMES
    }

    // ----------------------------------------------------------------------
    // Parse SQLx
    // ----------------------------------------------------------------------

    private static final int[] NO_INDICES = new int[0];

    private static String parseSqlx(String sqlx, Map<String, int[]> names) {
        // scan the statement for '?name'
        //
        int index = 0;
        int pos = 0, len = sqlx.length(), at;
        StringBuilder sql = new StringBuilder();
        StringBuilder builder;
        while (true) {
            // scan for '?...'
            at = sqlx.indexOf('?', pos);
            if (at == -1) break;
            index++;

            // append '...?'
            sql.append(sqlx, pos, at+1);

            // scan for ?name
            pos = at+1;
            builder = new StringBuilder();
            while(pos < len && Character.isJavaIdentifierPart(sqlx.charAt(pos))){
                builder.append(sqlx.charAt(pos));
                pos++;
            }

            // if it was '?name', register name & index
            if (builder.length() > 0) {
                String name = builder.toString();
                addName(names, name, index);
            }
        }
        // append the remaining part of the statement
        sql.append(sqlx, pos, len);
        return sql.toString();
    }

    private static void addName(Map<String, int[]> names, String name, int index){
        if (!names.containsKey(name))
            names.put(name, new int[0]);
        int[] old_indices = names.getOrDefault(name, NO_INDICES);
        int[] new_indices = new int[old_indices.length + 1];
        for(int i=0; i<old_indices.length; i++){
            new_indices[i] = old_indices[i];
        }
        new_indices[old_indices.length] = index;
        names.put(name, new_indices);
    }

    // ----------------------------------------------------------------------
    // Fields
    // ----------------------------------------------------------------------

    private static final String NONE = "";

    protected ConnectionEx c;
    protected String sqlx;
    protected Mode mode;

    protected String sql;
    protected java.sql.Statement stmt;

    protected Map<String, int[]> names = new HashMap<>();
    protected Map<Object, Object> params = new HashMap<>();
    protected String[] sparams = new String[16];

    protected int resultSetType;
    protected int resultSetConcurrency;
    protected int resultSetHoldability;
    protected int autoGeneratedKeys;
    protected int[] columnIndexes;
    protected String[] columnNames;

    // ----------------------------------------------------------------------
    // Constructor
    // ----------------------------------------------------------------------

    public StatementEx(ConnectionEx c) {
        this(c, NONE);
    }

    public StatementEx(ConnectionEx c, int resultSetType, int resultSetConcurrency) {
        this(c, NONE, resultSetType, resultSetConcurrency);
    }

    public StatementEx(ConnectionEx c, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        this(c, NONE, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public StatementEx(ConnectionEx c, String sqlx) {
        this.c = c;
        this.sqlx = sqlx;
        this.mode = Mode.NONE;

        this.sql = parseSqlx(sqlx, names);
    }

    public StatementEx(ConnectionEx c, String sqlx, int resultSetType, int resultSetConcurrency) {
        this.c = c;
        this.sqlx = sqlx;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.mode = Mode.RESULT_TYPE_CONCURRENCY;

        this.sql = parseSqlx(sqlx, names);
    }

    public StatementEx(ConnectionEx c, String sqlx, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        this.c = c;
        this.sqlx = sqlx;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.mode = Mode.RESULT_TYPE_CONCURRENCY_HOLDABILITY;

        this.sql = parseSqlx(sqlx, names);
    }

    public StatementEx(ConnectionEx c, String sqlx, int autoGeneratedKeys) {
        this.c = c;
        this.sqlx = sqlx;
        this.autoGeneratedKeys = autoGeneratedKeys;
        this.mode = Mode.AUTO_GENERATED_KEYS;

        this.sql = parseSqlx(sqlx, names);
    }

    public StatementEx(ConnectionEx c, String sqlx, int[] columnIndexes) {
        this.c = c;
        this.sqlx = sqlx;
        this.columnIndexes = columnIndexes;
        this.mode = Mode.COLUMN_INDEXES;

        this.sql = parseSqlx(sqlx, names);
    }

    public StatementEx(ConnectionEx c, String sqlx, String[] columnNames) {
        this.c = c;
        this.sqlx = sqlx;
        this.columnNames = columnNames;
        this.mode = Mode.COLUMN_NAMES;

        this.sql = parseSqlx(sqlx, names);
    }

    // ----------------------------------------------------------------------
    // Package properties
    // ----------------------------------------------------------------------

    @Override
    public void setStatementParameter(int index, String value) {
        if (index < 1) return;
        this.sparams[index-1] = value;
    }


    @Override
    public Connection getConnection() throws SQLException {
        return c;
    }
    
    private java.sql.Statement s() throws SQLException {
        if (this.stmt == null) {
            switch (this.mode) {
                case NONE:
                    this.stmt = this.conn().createStatement();
                    break;
                case RESULT_TYPE_CONCURRENCY:
                    this.stmt = this.conn().createStatement(this.resultSetType, this.resultSetConcurrency);
                    break;
                case RESULT_TYPE_CONCURRENCY_HOLDABILITY:
                    this.stmt = this.conn().createStatement(this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability);
                    break;
                default:
                    this.stmt = this.conn().createStatement();
            }
        }
        return this.stmt;
    }

    protected java.sql.Connection conn() {
        return this.c.c;
    }

    // ----------------------------------------------------------------------
    // Execute
    // ----------------------------------------------------------------------

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return new ResultSetEx(this, this.s().executeQuery(sql));
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeUpdate(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().execute(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeUpdate(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeUpdate(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeUpdate(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().execute(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().execute(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().execute(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeLargeUpdate(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeLargeUpdate(sql, columnIndexes);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeLargeUpdate(sql, columnNames);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        try {
            this.sqlx = this.sql = sql;
            return this.s().executeLargeUpdate(sql);
        } catch (SQLException e) {
            throw jext.sql.SQLException.of(e, sql, params);
        }
    }

    // ----------------------------------------------------------------------
    // ResultSet
    // ----------------------------------------------------------------------

    @Override
    public ResultSet getResultSet() throws SQLException {
        return new ResultSetEx(this, this.s().getResultSet());
    }

    // ----------------------------------------------------------------------
    // Close
    // ----------------------------------------------------------------------

    @Override
    public void close() throws SQLException {
        this.s().close();
    }

    @Override
    public void cancel() throws SQLException {
        this.s().cancel();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return this.s().isClosed();
    }

    // ----------------------------------------------------------------------
    // Getter/Setter
    // ----------------------------------------------------------------------

    @Override
    public int getMaxFieldSize() throws SQLException {
        return this.s().getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        this.s().setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return this.s().getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        this.s().setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        this.s().setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return this.s().getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        this.s().setQueryTimeout(seconds);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return this.s().getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        this.s().clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        this.s().setCursorName(name);
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return this.s().getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return this.s().getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        this.s().setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return this.s().getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        this.s().setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return this.s().getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return this.s().getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return this.s().getResultSetType();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return new ResultSetEx(this, this.s().getGeneratedKeys());
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return this.s().getResultSetHoldability();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        this.s().setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return this.s().isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        this.s().closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return this.s().isCloseOnCompletion();
    }

    // ----------------------------------------------------------------------
    // Batch
    // ----------------------------------------------------------------------

    @Override
    public void addBatch(String sql) throws SQLException {
        this.s().addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        this.s().clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return this.s().executeBatch();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return this.s().getMoreResults(current);
    }

    // ----------------------------------------------------------------------
    // Large
    // ----------------------------------------------------------------------

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return this.s().getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        this.s().setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return this.s().getLargeMaxRows();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return this.s().executeLargeBatch();
    }

    // ----------------------------------------------------------------------
    // Wrap
    // ----------------------------------------------------------------------

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this.s().unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this.s().isWrapperFor(iface);
    }

    // ----------------------------------------------------------------------
    // End
    // ----------------------------------------------------------------------

}

<?xml version="1.0" encoding="utf-8" ?>

<!--
    Ant documentation: https://ant.apache.org/manual/index.html

    'path'      ::=  location (:|;) location ...
    'location'  ::=  single file/directory. Can contain wildcards (*, ?)

    Patterns used in file names

    ?       any char, excluding '/','\'
    *       any seq of chars, excluding '/','\'
    **      any seq of subdirs or, if used alone or as last element,
            any seq of subdirs AND files

  -->
<!--

    <fileset defaultexcludes="yes|no|true|false">
        <include name="wildcard"/>
        <exclude name="wildcard"/>
    </fileset>

  -->
<project version="1.0">
    <name>Project Template</name>
    <description>
        Example of SPL project specification file, used to extract the
        dependencies between modules, (internal/external) libraries,
        sourced and other resources
    </description>

    <!--
        Properties
    -->
    <properties>
        <property name="name" value="value"/>
        <property name="name">long value</property>
    </properties>

    <!--
    <dependencies name="depname">
        <include maven="org.apache.commons:commons-io:2.2.4"/>
    </dependencies>
    -->

    <modules>
        <!--
            to identify automatically modules, sources resources etc,
            the project directory is 'scanned' using the following list
            of rules
          -->
        <scan>
            <!--
                some files/directories must be excluded because they contain
                invalid/useless files

                Applied to file/directory name
              -->
            <exclude>
                <!-- each file/directory with a name starting with a '.' -->
                <filename name=".*"/>
                <filename name="*~"/>

                <filename name="CVS"/>
                <filename name="SCCS"/>
                <filename name="*.scc"/>

                <!-- file or directory with the following names -->
                <filename name="target"/>
                <filename name="out"/>
                <filename name="build"/>
            </exclude>

            <!--
                a 'module' is each directory containing at least one of the
                following files.

                'name' must be 'relativePath'

                Macro available: '${dirName}' name of the current directory

                Applied to a directory as "<directory>/<name>"
              -->
            <module>
                <!-- Gradle: -->
                <filename name="build.gradle"/>
                <!-- Maven -->
                <filename name="./pom.xml"/>
                <!-- Ant -->
                <filename name="./build.xml"/>
                <!-- Eclipse -->
                <filename name=".classpath"/>
                <!-- Gradle -->
                <filename name="${dirName}.gradle"/>
                <!-- Maven -->
                <filename name="${dirName}.pom"/>
                <!-- a specific directory -->
                <filename name="src/main/java"/>
            </module>

        </scan>

        <!--
            it is possible to specify directly a module
            and add/remove properties or itself.

            For example, the scan identify TOO modules,
            dome modules can be 'removed'
          -->

        <!--
            It is possible to exclude modules with a specific name
          -->
        <remove>
            <filename name="**/*test*"/>
            <filename name="**/*example*"/>
        </remove>

        <!--
            The module with name '' is used as 'template' for all other modules
            It contains the 'default configuration' for all aspects of the
            module structure
          -->
        <module name="">
            <!--
                It is possible to specify the directory of an 'external modules',
                a module NOT DEFINED inside the project directory.
                For default, the module directory is

                    <projectDir>/<moduleName>

                If specified, the path can be 'absolute' (starts with '/' or '<letter>:/'
                or relative to the project path
              -->
            <!-- directory path="(absolute|relative)Path"/ -->
            <!--
                given a 'specific' module, it is possible
                modify (including/excluding files/directories)
                from the set collected from the previous step,
                using 'include'/'exclude'
              -->
            <!-- specify directly the source directories -->
            <sources>
                <directory name="src/main/java"/>
                <directory name="src/main/scala" includes="*.scala"/>
                <directory name="src/java" includes="*.java"/>
                <directory name="src">
                    <include name="**/*.java"/>
                </directory>
                <directory name="sources"/>
            </sources>

            <!--
                add/remove resources files/directories
                <filename name="..."> == <directory name="." includes="..."/>
            -->
            <resources>
                <!-- include specific type of files in the current directory -->
                <filename name="*.properties"/>
                <filename name="*.xml"/>
                <directory name="src/main/webapps"/>
            </resources>

            <repositories>
                <repository name="" url=""/>
            </repositories>

            <dependencies>
                <!-- module -->
                <dependency module="moduleName"/>
                <!--local file -->
                <dependency library="extras/local.jar"/>
                <!-- all files in 'libs' with extension '.jar' -->
                <dependency library="libs/*.jar"/>
                <!-- all files in 'libs' directory -->
                <dependency library="libs"/>
                <!-- maven library -->
                <dependency maven="groupId:artifactId[:version]"/>
                <dependency groupId="groupId" artifactId="artifactId" version="version"/>
            </dependencies>

        </module>

    </modules>

</project>